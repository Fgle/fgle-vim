" Modeline and Notes {
" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:
"
" }

" Environment {

    " Basics {
        set nocompatible        " Must be first line
        set background=dark     " Assume a dark background
    " }

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
          set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after

          " Be nice and check for multi_byte even if the config requires
          " multi_byte support most of the time
          if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
          endif
        endif
    " }

" }

" Setup Plug Support {
    " The next three lines ensure that the ~/.vim/plugged/ system works
    call plug#begin('~/.vim/plugged')
" }

" Plugs {

    " General {
            Plug 'scrooloose/nerdtree'                      "nerdtree
            Plug 'jistr/vim-nerdtree-tabs'
            Plug 'Xuyuanp/nerdtree-git-plugin'
            Plug 'tomasr/molokai'                           "主题
            Plug 'altercation/vim-colors-solarized'         "主题
            Plug 'tpope/vim-surround'                       "强大的括号补全等
            Plug 'terryma/vim-multiple-cursors'             "多光标
            Plug 'vim-airline/vim-airline'
            Plug 'vim-airline/vim-airline-themes'
            Plug 'powerline/fonts'
            Plug 'mbbill/undotree'
            Plug 'nathanaelkane/vim-indent-guides'          "缩进显示
    " }

    " Writing {
            "Plug 'kana/vim-textobj-user'
            "Plug 'kana/vim-textobj-indent'
            "Plug 'reedes/vim-litecorrect'
            "Plug 'reedes/vim-textobj-sentence'
            "Plug 'reedes/vim-textobj-quote'
            "Plug 'reedes/vim-wordy'
            Plug 'isnowfy/python-vim-instant-markdown'
            Plug 'plasticboy/vim-markdown'
    " }

    " Programming {
            Plug 'tpope/vim-fugitive'                       "git高亮
            Plug 'w0rp/ale'                                 "语法检测
            Plug 'tpope/vim-commentary'                     "注释
            Plug 'klen/python-mode'                         "python
            "Plug 'luochen1990/rainbow'                     "彩虹括号
            "Plug 'octol/vim-cpp-enhanced-highlight'        “c++语法高亮
    " }

    "Snippets & AutoComplete {
            Plug 'Valloric/YouCompleteMe',{'do': './install.py --clang-completer'}
            Plug 'SirVer/ultisnips'
            Plug 'honza/vim-snippets'
    " }

" }

" Initlalize plugin system {
    call plug#end()
" }
" Plugin {
    " General {
        " NerdTree {
            if isdirectory(expand("~/.vim/plugged/nerdtree"))
                noremap <C-e> <plug>NERDTreeTabsToggle<CR>
                noremap <leader>e :NERDTreeFind<CR>

                let g:nerdtree_tabs_open_on_gui_startup=0
                " 是否显示隐藏文件
                let NERDTreeShowHidden=1
                " 设置宽度
                let NERDTreeWinSize=31
                " 在终端启动vim时，共享NERDTree
                let g:nerdtree_tabs_open_on_console_startup=1
                " 忽略一下文件的显示
                let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
                " 显示书签列表
                let NERDTreeShowBookmarks=1
            endif
            if isdirectory(expand("~/.vim/plugged/nerdtree-git-plugin"))
                let g:NERDTreeIndicatorMapCustom = {
                    \ "Modified"  : "✹",
                    \ "Staged"    : "✚",
                    \ "Untracked" : "✭",
                    \ "Renamed"   : "➜",
                    \ "Unmerged"  : "═",
                    \ "Deleted"   : "✖",
                    \ "Dirty"     : "✗",
                    \ "Clean"     : "✔︎",
                    \ "Unknown"   : "?"
                \ }
            endif
        " }

        " vim-surround{
            if isdirectory(expand("~/.vim/plugged/vim-surround"))
                "一个单词
                nmap <leader>' ysiw'<CR>
                nmap <leader>" ysiw"<CR>
                nmap <leader>[ ysiw]<CR>
                nmap <leader>( ysiw)<CR>
                nmap <leader>< ysiw><CR>
                nmap <leader>{ ysiw}<CR>
              "一行
                nmap <leader>l' yss'<CR>
                nmap <leader>l" yss"<CR>
                nmap <leader>l[ yss]<CR>
                nmap <leader>l( yss)<CR>
                nmap <leader>l< yss><CR>
                nmap <leader>l{ yss}<CR>
                "删除
                nmap <leader>d' ds'<CR>
                nmap <leader>d" ds"<CR>
                nmap <leader>d[ ds]<CR>
                nmap <leader>d( ds)<CR>
                nmap <leader>d< ds><CR>
                nmap <leader>d{ ds}<CR>
            endif
        " }

        " airline{
            if isdirectory(expand("~/.vim/plugged/airline"))
                
            endif
        " }

        " indent_guides {
            if isdirectory(expand("~/.vim/plugged/vim-indent-guides/"))
                let g:indent_guides_start_level = 2
                let g:indent_guides_guide_size = 1
                let g:indent_guides_enable_on_vim_startup = 1
            endif
        " }

        " UndoTree {
            if isdirectory(expand("~/.vim/plugged/undotree/"))
                nnoremap <Leader>u :UndotreeToggle<CR>
                " If undotree is opened, it is likely one wants to interact with it.
                let g:undotree_SetFocusWhenToggle=1
            endif
        " }

        " vim-airline {
            if isdirectory(expand("~/.vim/plugged/vim-airline-themes/"))
                if !exists('g:airline_theme')
                    let g:airline_theme = 'solarized'
                endif
                if !exists('g:airline_powerline_fonts')
                    " Use the default set of separators with a few customizations
                    let g:airline_left_sep='›'  " Slightly fancier than '>'
                    let g:airline_right_sep='‹' " Slightly fancier than '<'
            endif
            endif
        " }
    " }

    " Writting {
    " }

    " Programing {

        " Fugitive {
            if isdirectory(expand("~/.vim/plugged/vim-fugitive/"))
                nnoremap <silent> <leader>gs :Gstatus<CR>
                nnoremap <silent> <leader>gd :Gdiff<CR>
                nnoremap <silent> <leader>gc :Gcommit<CR>
                nnoremap <silent> <leader>gb :Gblame<CR>
                nnoremap <silent> <leader>gl :Glog<CR>
                nnoremap <silent> <leader>gp :Git push<CR>
                nnoremap <silent> <leader>gr :Gread<CR>
                nnoremap <silent> <leader>gw :Gwrite<CR>
                nnoremap <silent> <leader>ge :Gedit<CR>
                " Mnemonic _i_nteractive
                nnoremap <silent> <leader>gi :Git add -p %<CR>
                nnoremap <silent> <leader>gg :SignifyToggle<CR>
           endif
        "}

        " ale{
            if isdirectory(expand("~/.vim/plugged/ale"))
                "始终开启标志列
                let g:ale_sign_column_always = 1
                let g:ale_set_highlights = 0
              "自定义error和warning图标
                let g:ale_sign_error = '✗'
                let g:ale_sign_warning = '⚡'
                "在vim自带的状态栏中整合ale
                let g:ale_statusline_format = ['✗ %d', '⚡ %d', '✔ OK']
                "设置状态行
                set statusline+=\ %{ALEGetStatusLine()}
                "显示Linter名称,出错或警告等相关信息
                let g:ale_echo_msg_error_str = 'E'
                let g:ale_echo_msg_warning_str = 'W'
                let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
                "对C/C++使用Clang进行语法检查
                let g:ale_linters = {'c': 'clang'}
                let g:ale_linters = {'c++': 'clang++'}
                "普通模式下，sp前往上一个错误或警告，sn前往下一个错误或警告
                nmap sp <Plug>(ale_previous_wrap)
                nmap sn <Plug>(ale_next_wrap)
                "<Leader>s触发/关闭语法检查
                nmap <Leader>s :ALEToggle<CR>
                "<Leader>d查看错误或警告的详细信息
                nmap <Leader>d :ALEDetail<CR>
            endif
        " }

        " vim-commentary{
            if isdirectory(expand("~/.vim/plugged/vim-commentary"))
                "为python,shell添加注释规则
                autocmd Filetype python,shell set commentstring=#\ %s
                "修改注释风格
                autocmd Filetype java,c,cpp set commentstring=//\ %s
            endif
         " }

        " PythonMode {
            " Disable if python support not present
            if !has('python') && !has('python3')
                let g:pymode = 0
            endif

            if isdirectory(expand("~/.vim/plugged/python-mode"))
                "开启警告
                let g:pymode_warnings = 0
                "保存文件时自动删除无用空格
                let g:pymode_trim_whitespaces = 1
                let g:pymode_options = 1
                "显示允许的最大长度的列
                let g:pymode_options_colorcolumn = 1
                "设置QuickFix窗口的最大，最小高度
                let g:pymode_quickfix_minheight = 3
                let g:pymode_quickfix_maxheight = 10
                "使用python3
                let g:pymode_python = 'python3'
                "使用PEP8风格的缩进
                let g:pymode_indent = 1
                "取消代码折叠
                let g:pymode_folding = 0
                "开启python-mode定义的移动方式
                let g:pymode_motion = 1
                "启用python-mode内置的python文档，使用K进行查找
                let g:pymode_doc = 1
                let g:pymode_doc_bind = 'K'
                "自动检测并启用virtualenv
                let g:pymode_virtualenv = 1
                "不使用python-mode运行python代码
                let g:pymode_run = 0
                "let g:pymode_run_bind = '<Leader>r'
                "不使用python-mode设置断点
                let g:pymode_breakpoint = 0
                "let g:pymode_breakpoint_bind = '<leader>b'
                "启用python语法检查
                let g:pymode_lint = 1
                "修改后保存时进行检查
                let g:pymode_lint_on_write = 0
                "编辑时进行检查
                let g:pymode_lint_on_fly = 0
                let g:pymode_lint_checkers = ['pyflakes', 'pep8']
                "发现错误时不自动打开QuickFix窗口
                let g:pymode_lint_cwindow = 0
                "侧边栏不显示python-mode相关的标志
                let g:pymode_lint_signs = 0
                "let g:pymode_lint_todo_symbol = 'WW'
                "let g:pymode_lint_comment_symbol = 'CC'
                "let g:pymode_lint_visual_symbol = 'RR'
                "let g:pymode_lint_error_symbol = 'EE'
                "let g:pymode_lint_info_symbol = 'II'
                "let g:pymode_lint_pyflakes_symbol = 'FF'
                "启用重构
                let g:pymode_rope = 1
                "不在父目录下查找.ropeproject，能提升响应速度
                let g:pymode_rope_lookup_project = 0
                "光标下单词查阅文档
                let g:pymode_rope_show_doc_bind = '<C-c>d'
                "项目修改后重新生成缓存
                let g:pymode_rope_regenerate_on_write = 1
                "开启补全，并设置<C-Tab>为默认快捷键
                let g:pymode_rope_completion = 1
                let g:pymode_rope_complete_on_dot = 1
                let g:pymode_rope_completion_bind = '<C-Tab>'
                "<C-c>g跳转到定义处，同时新建竖直窗口打开
                let g:pymode_rope_goto_definition_bind = '<C-c>g'
                let g:pymode_rope_goto_definition_cmd = 'vnew'
                "重命名光标下的函数，方法，变量及类名
                let g:pymode_rope_rename_bind = '<C-c>rr'
                "重命名光标下的模块或包
                let g:pymode_rope_rename_module_bind = '<C-c>r1r'
                "开启python所有的语法高亮
                let g:pymode_syntax = 1
                let g:pymode_syntax_all = 1
                "高亮缩进错误
                let g:pymode_syntax_indent_errors = g:pymode_syntax_all
                "高亮空格错误
                let g:pymode_syntax_space_errors = g:pymode_syntax_all
            endif
        " }

        "cpp_highlight{
            if isdirectory(expand("~/.vim/plugged/"))
                let g:cpp_class_scope_highlight = 1
                let g:cpp_member_variable_highlight = 1
                "let g:cpp_class_decl_highlight = 1
                let g:cpp_experimental_template_highlight = 1
                "let g:cpp_experimental_simple_template_highlight = 1
                let g:cpp_concepts_highlight = 1
                "let g:cpp_no_function_highlight = 1
            endif
        "}
    " }
    " Snippets & AutoComplete {
        " YouCompleteMe {
            if count(g:fgle_plug_groups, 'youcompleteme')
                let g:acp_enableAtStartup = 0

                " enable completion from tags
                let g:ycm_collect_identifiers_from_tags_files = 1
                let g:ycm_global_ycm_extra_conf = '~/.vim/plugged/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
                let g:ycm_server_keep_logfiles = 1
                let g:ycm_server_log_level = 'debug'

                " remap Ultisnips for compatibility for YCM
                let g:UltiSnipsExpandTrigger = "<leader><tab>"
                let g:UltiSnipsJumpForwardTrigger = '"<leader><tab>"
                let g:UltiSnipsJumpBackwardTrigger = "<leader><tab>"

                " Enable omni completion.
                autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
                autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
                autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
                autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
                autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
                autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
                autocmd FileType haskell setlocal omnifunc=necoghc#omnifunc
                inoremap <leader>c <C-x><C-o>

                " Haskell post write lint and check with ghcmod
                " $ `cabal install ghcmod` if missing and ensure
                " ~/.cabal/bin is in your $PATH.
                if !executable("ghcmod")
                    autocmd BufWritePost *.hs GhcModCheckAndLintAsync
                endif

                " For snippet_complete marker.
                if !exists("g:fgle_no_conceal")
                    if has('conceal')
                        set conceallevel=2 concealcursor=i
                    endif
                endif

                " Disable the neosnippet preview candidate window
                " When enabled, there can be too much visual noise
                " especially when splits are used.
                set completeopt-=preview
            endif
        " }
    " }
" }
